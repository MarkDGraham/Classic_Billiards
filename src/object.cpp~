#include "object.h"

Object::Object(const char * path)
{

    Vertices = {};
    Indices = {};
    bool res = loadObj(path);


    if(res)
    {

        glGenBuffers(1, &VB);
        glBindBuffer(GL_ARRAY_BUFFER, VB);
        glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * Vertices.size(), &Vertices[0], GL_STATIC_DRAW);

        glGenBuffers(1, &IB);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * Indices.size(), &Indices[0], GL_STATIC_DRAW);
    }

    angle = 0.0f;
}

Object::~Object()
{
    Vertices.clear();
    Indices.clear();
}

void Object::InitLocalParams(float rSpeed, float oSpeed, float mScale, float oRadius, float oTilt, Object* mParent) {
    rotateSpeed = rSpeed;
    orbitSpeed = oSpeed;
    scale = mScale;
    orbitRadius = oRadius;
    orbitTilt = oTilt;
    parent = mParent;

}

void Object::Update(unsigned int dt, float globalSpeed) {
    angle += dt * globalSpeed * M_PI/2000;

    if(parent != nullptr) {
        parentModel = parent->GetModel();
                //Move to parent's position
        model = glm::translate(glm::mat4(1.0f), glm::vec3(parentModel[3][0], parentModel[3][1], parentModel[3][2])) *
                //Orbit tilt
                glm::rotate(glm::mat4(1.0f), (orbitTilt), glm::vec3(3.0, 0.0, 3.0)) *
                //Orbit Speed
                glm::rotate(glm::mat4(1.0f), (angle * orbitSpeed), glm::vec3(0.0, 3.0, 0.0)) *
                //Orbit Radius
                glm::translate(glm::mat4(1.0f), glm::vec3(float(orbitRadius), 0.0, 0.0)) *
                //Rotate Speed
                glm::rotate(glm::mat4(1.0f), (angle * rotateSpeed), glm::vec3(0.0, 3.0, 0.0)) *
                //Scale
                glm::scale(glm::mat4(1.0f), glm::vec3(float(scale)));
    }
    else {
        model =//Orbit tilt
                glm::rotate(glm::mat4(1.0f), (orbitTilt), glm::vec3(3.0, 0.0, 3.0)) *
                //Orbit Speed
                glm::rotate(glm::mat4(1.0f), (angle * orbitSpeed), glm::vec3(0.0, 3.0, 0.0)) *
                //Orbit Radius
                glm::translate(glm::mat4(1.0f), glm::vec3(float(orbitRadius), 0.0, 0.0)) *
                //Rotate Speed
                glm::rotate(glm::mat4(1.0f), (angle * rotateSpeed), glm::vec3(0.0, 3.0, 0.0)) *
                //Scale
                glm::scale(glm::mat4(1.0f), glm::vec3(float(scale)));
    }
}

glm::mat4 Object::GetModel()
{
    return model;
}

bool Object::loadObj(const char *path) {

    //Create aiScene from file with Assimp importer
    m_Scene = importer.ReadFile(path, aiProcess_Triangulate);
    meshNumber = m_Scene->mNumMeshes;
    aiMesh *mesh;

    Magick::InitializeMagick(nullptr);

    texture = new GLuint[meshNumber];
    for(unsigned int j = 0; j < meshNumber; j++)
    {

        if(m_Scene->HasMaterials())
        {
            const aiMaterial* material = m_Scene->mMaterials[j+1];
            aiString texturePath;

            if(material->GetTextureCount(aiTextureType_DIFFUSE) > 0)
            {
                if(material->GetTexture(aiTextureType_DIFFUSE, 0, &texturePath, NULL, NULL, NULL, NULL, NULL) == AI_SUCCESS)
                {
                    Magick::Blob blob;
                    Magick::Image *image;
                    image = new Magick::Image(std::string("../res/") + texturePath.C_Str());
                    image->write(&blob, "RGBA");


                    //generate texture in OpenGL
                    glGenTextures(1, &texture[j]);
                    glBindTexture(GL_TEXTURE_2D, texture[j]);
                    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image->columns(), image->rows(), 0, GL_RGBA, GL_UNSIGNED_BYTE, blob.data());
                    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
                    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
                    delete image;
                }
            }
        }
    }

    for(unsigned int meshNum = 0; meshNum < meshNumber; meshNum++)
    {
        mesh = m_Scene->mMeshes[meshNum]; //holds current mesh
        meshData.push_back(meshInfo(mesh->mNumFaces * 3, Indices.size())); // add 1 mesh to meshData vector & starting index

        aiColor4D colorVal(0.0f, 0.0f, 0.0f, 1.0f); //r, g, b, a, (a controls transparency)
        m_Scene->mMaterials[meshNum + 1]->Get(AI_MATKEY_COLOR_DIFFUSE, colorVal);
        aiMaterial* mtrl; // define a material type (stores materials)
        mtrl = m_Scene->mMaterials[mesh->mMaterialIndex]; //retrieve current mesh materials
        glm::vec3 colorVert(0.0f, 0.0f, 0.0f); // initialize a temporary color vertex
        glm::vec2 textureVert(0.0f, 0.0f); //initialize a temporary texture vertex

        if (mtrl != NULL)
        {
            if (AI_SUCCESS == aiGetMaterialColor(mtrl, AI_MATKEY_COLOR_DIFFUSE, &colorVal))
            {
                colorVert.x = colorVal.r;
                colorVert.y = colorVal.g;
                colorVert.z = colorVal.b;
            }
        }

        // Get INDICES (and vertices) from MESH
        int faceNumber = mesh->mNumFaces; //holds the number of faces in the current mesh

        for (int f = 0; f < faceNumber; f++) //traverse each face, save the 3 indices
        {
            aiFace* face = &mesh->mFaces[f]; // get the current face
            // Use index value to load vertex values from mVertices
            for (int i = 0; i < 3; i++)
            {
                Indices.push_back(face->mIndices[i]);  // push back face indices onto Indices
                if (mesh->HasTextureCoords(0))
                {
                    aiVector3D vert = mesh->mTextureCoords[0][face->mIndices[i]];
                    textureVert.x = vert.x;
                    textureVert.y = vert.y;
                }
                // load vertexs for face using mesh indices
                aiVector3D vertVect = mesh->mVertices[Indices.back()]; // get current vertices vector
                aiVector3D normVect = mesh->mNormals[Indices.back()];
                glm::vec3 tempPos = glm::vec3(vertVect.x, vertVect.y, vertVect.z);
                glm::vec3 tempNorm = glm::vec3(normVect.x, normVect.y, normVect.z);

                Vertex* tempVertex = new Vertex(tempPos, colorVert, textureVert, tempNorm);
                Vertices.push_back(*tempVertex); // push back position and color vector into Vertices
            }

        }
    }

    return true;
}

void Object::Render()
{
    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);
    glEnableVertexAttribArray(2);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,color));
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,uv));

    for(unsigned int i = 0; i < meshData.size(); i++)
    {
        glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * meshData[i].meshSize, &Vertices[meshData[i].meshStartIndex], GL_STATIC_DRAW);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * meshData[i].meshSize, &Indices[meshData[i].meshStartIndex], GL_STATIC_DRAW);

        //bind texture
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture[i]);
        glDrawElements(GL_TRIANGLES, Indices.size(), GL_UNSIGNED_INT, 0);
    }

    //glDrawElements(GL_TRIANGLES, Indices.size(), GL_UNSIGNED_INT, 0);

    glDisableVertexAttribArray(0);
    glDisableVertexAttribArray(1);
    glDisableVertexAttribArray(2);
}


